// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OrderManagementAPI.Data;

#nullable disable

namespace OrderManagementAPI.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("OrderManagementAPI.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("OrderManagementClassLibrary.Models.CustomerHeader", b =>
                {
                    b.Property<int>("CustomerHeaderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerHeaderId"));

                    b.Property<string>("CustomerEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerPhone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsCheckedOut")
                        .HasColumnType("bit");

                    b.Property<string>("TableNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CustomerHeaderId");

                    b.ToTable("CustomerHeaders");
                });

            modelBuilder.Entity("OrderManagementClassLibrary.Models.CustomersMenu", b =>
                {
                    b.Property<int>("DailyMenuCustomerRecordId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DailyMenuCustomerRecordId"));

                    b.Property<int>("CustomerHeaderId")
                        .HasColumnType("int");

                    b.Property<int>("DailyMenuId")
                        .HasColumnType("int");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("DailyMenuCustomerRecordId");

                    b.HasIndex("CustomerHeaderId");

                    b.HasIndex("DailyMenuId");

                    b.ToTable("DailyMenuCustomerRecords");
                });

            modelBuilder.Entity("OrderManagementClassLibrary.Models.DailyMenu", b =>
                {
                    b.Property<int>("DailyMenuId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DailyMenuId"));

                    b.Property<decimal>("CookedQuantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("CustomerHeaderId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DailyMenuDate")
                        .HasColumnType("date");

                    b.Property<decimal>("DemandQuantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("RecipeId")
                        .HasColumnType("int");

                    b.Property<decimal>("ServingQuantity")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("DailyMenuId");

                    b.HasIndex("CustomerHeaderId");

                    b.HasIndex("RecipeId");

                    b.ToTable("DailyMenus");
                });

            modelBuilder.Entity("OrderManagementClassLibrary.Models.Item", b =>
                {
                    b.Property<int>("ItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ItemId"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Unit")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ItemId");

                    b.ToTable("Items");

                    b.HasData(
                        new
                        {
                            ItemId = 1,
                            Name = "Rice",
                            Type = "Non-perishable",
                            Unit = "KG"
                        },
                        new
                        {
                            ItemId = 2,
                            Name = "Salt",
                            Type = "Perishable",
                            Unit = "KG"
                        },
                        new
                        {
                            ItemId = 3,
                            Name = "Soyabean Oil",
                            Type = "Perishable",
                            Unit = "Litter"
                        },
                        new
                        {
                            ItemId = 4,
                            Name = "Mustard Oil",
                            Type = "Perishable",
                            Unit = "Litter"
                        },
                        new
                        {
                            ItemId = 5,
                            Name = "Bashmoti Rice",
                            Type = "Non-perishable",
                            Unit = "KG"
                        },
                        new
                        {
                            ItemId = 6,
                            Name = "Mutton",
                            Type = "Perishable",
                            Unit = "KG"
                        },
                        new
                        {
                            ItemId = 7,
                            Name = "Beef",
                            Type = "Perishable",
                            Unit = "KG"
                        },
                        new
                        {
                            ItemId = 8,
                            Name = "Chili",
                            Type = "Perishable",
                            Unit = "KG"
                        },
                        new
                        {
                            ItemId = 9,
                            Name = "Turmeric Powder",
                            Type = "Non-perishable",
                            Unit = "KG"
                        },
                        new
                        {
                            ItemId = 10,
                            Name = "Ginger",
                            Type = "Perishable",
                            Unit = "KG"
                        },
                        new
                        {
                            ItemId = 11,
                            Name = "Onion",
                            Type = "Perishable",
                            Unit = "KG"
                        },
                        new
                        {
                            ItemId = 12,
                            Name = "Garlic",
                            Type = "Perishable",
                            Unit = "KG"
                        },
                        new
                        {
                            ItemId = 13,
                            Name = "Sugar",
                            Type = "Non-perishable",
                            Unit = "KG"
                        },
                        new
                        {
                            ItemId = 14,
                            Name = "Yogurt",
                            Type = "Perishable",
                            Unit = "Litter"
                        },
                        new
                        {
                            ItemId = 15,
                            Name = "Milk",
                            Type = "Perishable",
                            Unit = "Litter"
                        },
                        new
                        {
                            ItemId = 16,
                            Name = "Ketchup",
                            Type = "Perishable",
                            Unit = "Litter"
                        },
                        new
                        {
                            ItemId = 17,
                            Name = "Raisin",
                            Type = "Non-perishable",
                            Unit = "KG"
                        },
                        new
                        {
                            ItemId = 18,
                            Name = "Bay Leaves",
                            Type = "Non-perishable",
                            Unit = "KG"
                        },
                        new
                        {
                            ItemId = 19,
                            Name = "Green Candamon",
                            Type = "Non-perishable",
                            Unit = "KG"
                        },
                        new
                        {
                            ItemId = 20,
                            Name = "Cloves",
                            Type = "Non-perishable",
                            Unit = "KG"
                        },
                        new
                        {
                            ItemId = 21,
                            Name = "Nut",
                            Type = "Non-perishable",
                            Unit = "KG"
                        },
                        new
                        {
                            ItemId = 22,
                            Name = "Lentils",
                            Type = "Non-perishable",
                            Unit = "KG"
                        },
                        new
                        {
                            ItemId = 23,
                            Name = "Capsicum",
                            Type = "Perishable",
                            Unit = "KG"
                        },
                        new
                        {
                            ItemId = 24,
                            Name = "Peas",
                            Type = "Non-perishable",
                            Unit = "KG"
                        },
                        new
                        {
                            ItemId = 25,
                            Name = "Butter",
                            Type = "Perishable",
                            Unit = "KG"
                        },
                        new
                        {
                            ItemId = 26,
                            Name = "Egg",
                            Type = "Perishable",
                            Unit = "Piece"
                        },
                        new
                        {
                            ItemId = 27,
                            Name = "Chicken",
                            Type = "Perishable",
                            Unit = "KG"
                        },
                        new
                        {
                            ItemId = 28,
                            Name = "Corn flour",
                            Type = "Non-perishable",
                            Unit = "KG"
                        },
                        new
                        {
                            ItemId = 29,
                            Name = "Tomato",
                            Type = "Perishable",
                            Unit = "KG"
                        },
                        new
                        {
                            ItemId = 30,
                            Name = "Chili Powder",
                            Type = "Non-perishable",
                            Unit = "KG"
                        },
                        new
                        {
                            ItemId = 31,
                            Name = "Garam Masala Powder",
                            Type = "Non-perishable",
                            Unit = "KG"
                        },
                        new
                        {
                            ItemId = 32,
                            Name = "Cotton Fish",
                            Type = "Perishable",
                            Unit = "KG"
                        },
                        new
                        {
                            ItemId = 33,
                            Name = "Shrimp Fish",
                            Type = "Perishable",
                            Unit = "KG"
                        },
                        new
                        {
                            ItemId = 34,
                            Name = "Katla Fish",
                            Type = "Perishable",
                            Unit = "KG"
                        },
                        new
                        {
                            ItemId = 35,
                            Name = "Hilsa Fish",
                            Type = "Perishable",
                            Unit = "KG"
                        },
                        new
                        {
                            ItemId = 36,
                            Name = "Mustard",
                            Type = "Non-perishable",
                            Unit = "KG"
                        },
                        new
                        {
                            ItemId = 37,
                            Name = "Coconut",
                            Type = "Perishable",
                            Unit = "Piece"
                        },
                        new
                        {
                            ItemId = 38,
                            Name = "Ghee",
                            Type = "Perishable",
                            Unit = "Litter"
                        },
                        new
                        {
                            ItemId = 39,
                            Name = "Cheery",
                            Type = "Perishable",
                            Unit = "KG"
                        },
                        new
                        {
                            ItemId = 40,
                            Name = "Zafran",
                            Type = "Non-perishable",
                            Unit = "KG"
                        });
                });

            modelBuilder.Entity("OrderManagementClassLibrary.Models.Recipe", b =>
                {
                    b.Property<int>("RecipeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RecipeId"));

                    b.Property<string>("RecipeName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RecipeId");

                    b.ToTable("Recipes");

                    b.HasData(
                        new
                        {
                            RecipeId = 1,
                            RecipeName = "Plain Rice"
                        },
                        new
                        {
                            RecipeId = 2,
                            RecipeName = "Kachchi"
                        },
                        new
                        {
                            RecipeId = 3,
                            RecipeName = "Polao"
                        },
                        new
                        {
                            RecipeId = 4,
                            RecipeName = "Biriyani"
                        },
                        new
                        {
                            RecipeId = 5,
                            RecipeName = "Khicuri"
                        },
                        new
                        {
                            RecipeId = 6,
                            RecipeName = "Fried Rice"
                        },
                        new
                        {
                            RecipeId = 7,
                            RecipeName = "Beef Rezala"
                        },
                        new
                        {
                            RecipeId = 8,
                            RecipeName = "Chicken Roast"
                        },
                        new
                        {
                            RecipeId = 9,
                            RecipeName = "Spicy Dry Chicken"
                        },
                        new
                        {
                            RecipeId = 10,
                            RecipeName = "Fried Chicken"
                        },
                        new
                        {
                            RecipeId = 11,
                            RecipeName = "Mutton Curry"
                        },
                        new
                        {
                            RecipeId = 12,
                            RecipeName = "Korma"
                        },
                        new
                        {
                            RecipeId = 13,
                            RecipeName = "Kalia"
                        },
                        new
                        {
                            RecipeId = 14,
                            RecipeName = "Shorshe Ilish"
                        },
                        new
                        {
                            RecipeId = 15,
                            RecipeName = "Chingri Malai Curry"
                        },
                        new
                        {
                            RecipeId = 16,
                            RecipeName = "Kala Bhuna"
                        },
                        new
                        {
                            RecipeId = 17,
                            RecipeName = "Fish Curry"
                        },
                        new
                        {
                            RecipeId = 18,
                            RecipeName = "Haleem"
                        },
                        new
                        {
                            RecipeId = 19,
                            RecipeName = "Jorda"
                        },
                        new
                        {
                            RecipeId = 20,
                            RecipeName = "Firni"
                        });
                });

            modelBuilder.Entity("OrderManagementClassLibrary.Models.RecipeItem", b =>
                {
                    b.Property<int>("RecipeItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RecipeItemId"));

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("RecipeId")
                        .HasColumnType("int");

                    b.HasKey("RecipeItemId");

                    b.HasIndex("ItemId");

                    b.HasIndex("RecipeId");

                    b.ToTable("RecipeItems");

                    b.HasData(
                        new
                        {
                            RecipeItemId = 1,
                            ItemId = 1,
                            Quantity = 1m,
                            RecipeId = 1
                        },
                        new
                        {
                            RecipeItemId = 2,
                            ItemId = 5,
                            Quantity = 1m,
                            RecipeId = 2
                        },
                        new
                        {
                            RecipeItemId = 3,
                            ItemId = 3,
                            Quantity = 1m,
                            RecipeId = 2
                        },
                        new
                        {
                            RecipeItemId = 4,
                            ItemId = 6,
                            Quantity = 1m,
                            RecipeId = 2
                        },
                        new
                        {
                            RecipeItemId = 5,
                            ItemId = 9,
                            Quantity = 1m,
                            RecipeId = 2
                        },
                        new
                        {
                            RecipeItemId = 6,
                            ItemId = 10,
                            Quantity = 1m,
                            RecipeId = 2
                        },
                        new
                        {
                            RecipeItemId = 7,
                            ItemId = 11,
                            Quantity = 1m,
                            RecipeId = 2
                        },
                        new
                        {
                            RecipeItemId = 8,
                            ItemId = 12,
                            Quantity = 1m,
                            RecipeId = 2
                        },
                        new
                        {
                            RecipeItemId = 9,
                            ItemId = 13,
                            Quantity = 1m,
                            RecipeId = 2
                        },
                        new
                        {
                            RecipeItemId = 10,
                            ItemId = 14,
                            Quantity = 1m,
                            RecipeId = 2
                        },
                        new
                        {
                            RecipeItemId = 11,
                            ItemId = 16,
                            Quantity = 1m,
                            RecipeId = 2
                        },
                        new
                        {
                            RecipeItemId = 12,
                            ItemId = 17,
                            Quantity = 1m,
                            RecipeId = 2
                        },
                        new
                        {
                            RecipeItemId = 13,
                            ItemId = 18,
                            Quantity = 1m,
                            RecipeId = 2
                        },
                        new
                        {
                            RecipeItemId = 14,
                            ItemId = 19,
                            Quantity = 1m,
                            RecipeId = 2
                        },
                        new
                        {
                            RecipeItemId = 15,
                            ItemId = 20,
                            Quantity = 1m,
                            RecipeId = 2
                        },
                        new
                        {
                            RecipeItemId = 16,
                            ItemId = 21,
                            Quantity = 1m,
                            RecipeId = 2
                        },
                        new
                        {
                            RecipeItemId = 17,
                            ItemId = 30,
                            Quantity = 1m,
                            RecipeId = 2
                        },
                        new
                        {
                            RecipeItemId = 18,
                            ItemId = 31,
                            Quantity = 1m,
                            RecipeId = 2
                        },
                        new
                        {
                            RecipeItemId = 19,
                            ItemId = 38,
                            Quantity = 1m,
                            RecipeId = 2
                        },
                        new
                        {
                            RecipeItemId = 20,
                            ItemId = 40,
                            Quantity = 1m,
                            RecipeId = 2
                        });
                });

            modelBuilder.Entity("OrderManagementClassLibrary.Models.Requisition", b =>
                {
                    b.Property<int>("RequisitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RequisitionId"));

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<string>("RequestedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("RequestedQuantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("RequisitionDate")
                        .HasColumnType("datetime2");

                    b.HasKey("RequisitionId");

                    b.HasIndex("ItemId");

                    b.ToTable("Requisitions");
                });

            modelBuilder.Entity("OrderManagementClassLibrary.Models.SaleDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DailyMenuId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("SaleHeaderId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DailyMenuId");

                    b.HasIndex("SaleHeaderId");

                    b.ToTable("SaleDetails");
                });

            modelBuilder.Entity("OrderManagementClassLibrary.Models.SaleHeader", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CustomerEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerPhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InvoiceNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("SaleDate")
                        .HasColumnType("date");

                    b.Property<decimal>("TotalBill")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("VAT")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("SaleHeader");
                });

            modelBuilder.Entity("OrderManagementClassLibrary.Models.Transaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("InvoiceNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TableNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TotalPay")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("OrderManagementAPI.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("OrderManagementAPI.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OrderManagementAPI.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("OrderManagementAPI.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OrderManagementClassLibrary.Models.CustomersMenu", b =>
                {
                    b.HasOne("OrderManagementClassLibrary.Models.CustomerHeader", "CustomerHeader")
                        .WithMany()
                        .HasForeignKey("CustomerHeaderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OrderManagementClassLibrary.Models.DailyMenu", "DailyMenu")
                        .WithMany()
                        .HasForeignKey("DailyMenuId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CustomerHeader");

                    b.Navigation("DailyMenu");
                });

            modelBuilder.Entity("OrderManagementClassLibrary.Models.DailyMenu", b =>
                {
                    b.HasOne("OrderManagementClassLibrary.Models.CustomerHeader", null)
                        .WithMany("DailyMenus")
                        .HasForeignKey("CustomerHeaderId");

                    b.HasOne("OrderManagementClassLibrary.Models.Recipe", "Recipe")
                        .WithMany("DailyMenus")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Recipe");
                });

            modelBuilder.Entity("OrderManagementClassLibrary.Models.RecipeItem", b =>
                {
                    b.HasOne("OrderManagementClassLibrary.Models.Item", "Item")
                        .WithMany("RecipeItems")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OrderManagementClassLibrary.Models.Recipe", "Recipe")
                        .WithMany("RecipeItems")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("Recipe");
                });

            modelBuilder.Entity("OrderManagementClassLibrary.Models.Requisition", b =>
                {
                    b.HasOne("OrderManagementClassLibrary.Models.Item", "Item")
                        .WithMany("Requisitions")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");
                });

            modelBuilder.Entity("OrderManagementClassLibrary.Models.SaleDetails", b =>
                {
                    b.HasOne("OrderManagementClassLibrary.Models.DailyMenu", "DailyMenu")
                        .WithMany("SaleDetails")
                        .HasForeignKey("DailyMenuId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OrderManagementClassLibrary.Models.SaleHeader", "SaleHeader")
                        .WithMany("SaleDetails")
                        .HasForeignKey("SaleHeaderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DailyMenu");

                    b.Navigation("SaleHeader");
                });

            modelBuilder.Entity("OrderManagementClassLibrary.Models.CustomerHeader", b =>
                {
                    b.Navigation("DailyMenus");
                });

            modelBuilder.Entity("OrderManagementClassLibrary.Models.DailyMenu", b =>
                {
                    b.Navigation("SaleDetails");
                });

            modelBuilder.Entity("OrderManagementClassLibrary.Models.Item", b =>
                {
                    b.Navigation("RecipeItems");

                    b.Navigation("Requisitions");
                });

            modelBuilder.Entity("OrderManagementClassLibrary.Models.Recipe", b =>
                {
                    b.Navigation("DailyMenus");

                    b.Navigation("RecipeItems");
                });

            modelBuilder.Entity("OrderManagementClassLibrary.Models.SaleHeader", b =>
                {
                    b.Navigation("SaleDetails");
                });
#pragma warning restore 612, 618
        }
    }
}
